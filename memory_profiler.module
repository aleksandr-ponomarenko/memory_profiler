<?php

/**
 * @file
 * This simple module logs peak memory usage.
 */

use Drupal\Component\Utility\Timer;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Core\Url;

/**
 * Runs on shutdown to log peak memory usage.
 *
 * MemoryProfilerEventSubscriber::onRequest registers this function as a
 * shutdown function.
 * The bulk of the work is done in memory_profiler_shutdown_real().
 */
function memory_profiler_shutdown() {
  // Registers the real shutdown function so it runs later than other shutdown
  // functions.
  drupal_register_shutdown_function('memory_profiler_shutdown_real');
}

/**
 * Runs on shutdown to log peak memory usage.
 *
 * The memory_profiler_shutdown() function registers the below function as a
 * shutdown function.
 */
function memory_profiler_shutdown_real() {
  if (\Drupal::routeMatch()->getRouteName() == 'memory_profiler.ajax_performance_data') {
    return;
  }

  $path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);

  if (!Url::fromRoute('<current>')->isRouted()) {
    return;
  }

  // ToDo it configurable.
  if (strpos($path, '/' . PublicStream::basePath()) === 0) {
    return;
  }

  $account = \Drupal::currentUser();
  $site_config = \Drupal::config('memory_profiler.settings');

  if ($account->isAnonymous() && !$site_config->get('anonymous')) {
    return;
  }

  $memory_peak = round(memory_get_peak_usage(FALSE) / 1024 / 1024, 2);
  Timer::stop('memory_profiler');
  $run_time = round(Timer::read('memory_profiler') / 1000, 2);

  // Memory or time limit.
  if (($run_time - ($site_config->get('time') ?? 0) < 0) && ($memory_peak - ($site_config->get('memory') ?? 0) < 0)) {
    return;
  }

  $message = "<b>$run_time</b>s <b>$memory_peak</b>mb - <b>$path</b>";
  $message = ($alias != $path) ? $message . " ($alias)" : $message;
  $ajax_elem = [
    'short' => "{$run_time}s {$memory_peak}mb",
    'long' => $message,
  ];


  // Watchdog.
  if ($site_config->get('watchdog')) {
    \Drupal::logger('memory_profiler')->debug($message);
  }

  // Admin menu.
  if ($site_config->get('echo') && $account->hasPermission('access memory profiler')) {
    $tempstore = \Drupal::service('tempstore.private')->get('memory_profiler');
    $storage = $tempstore->get('storage');
    $storage = $storage ? $storage : [];
    $storage[] = $ajax_elem;
    $tempstore->set('storage', $storage);
  }
}

/**
 * Implements hook_toolbar().
 */
function memory_profiler_toolbar() {
  $account = \Drupal::currentUser();
  $site_config = \Drupal::config('memory_profiler.settings');
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('admin_toolbar') || !$site_config->get('echo') || !$account->hasPermission('access memory profiler')){
    return [];
  }

  return [
    'memory_profiler' => [
      '#type' => 'toolbar_item',
      'tab' => [
        '#type' => 'markup',
        '#markup' => '<div id="memory-profiler" class="toolbar-item toolbar-icon toolbar-icon-system-admin-config">Updating...</div>',
      ],
      '#weight' => 200,
      '#attached' => [
        'library' => [
          'memory_profiler/memory_profiler',
        ],
      ],
    ],
  ];
}
